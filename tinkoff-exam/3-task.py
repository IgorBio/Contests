'''
Максим пришёл в Тинькофф, чтобы взять кредит на покупку новогодних подарков. Ему предодобрен кредит в размере m бурлей, значит он может взять любое целое количество бурлей от 0 до m включительно.
У Максима есть заранее подготовленный список из n подарков. Он планирует идти по порядку вдоль списка и каждый раз, когда он видит подарок, на который у него хватает денег, он обязательно моментально его покупает.
Помогите ему посчитать, какое максимальное количество денег у него может остаться после закупки подарков, если он возьмёт кредит оптимального размера (то есть такого, чтобы у него осталось как можно больше денег после покупки подарков по алгоритму).

Формат входных данных
Первая строка содержит два целых числа n и m(1≤n≤10^5,1≤m≤10^9) — длина списка подарков и размер предодобренного кредита.
Вторая строка содержит n целых чисел — цены подарков ai(1≤ai≤10^9).

Формат выходных данных
Выведите одно число — максимальное количество бурлей, которое могло остаться у Максима после закупки подарков. 

Замечание
В первом примере Максим может взять в кредит 3 бурля, и тогда он купит только последний подарок. Во втором примере Максим может взять кредит на все 10 бурлей и купить все подарки.

Примеры данных
Пример 1
Ввод:
3 10
5 4 1
Вывод:
2
Пример 2
Ввод:
3 10
1 2 3
Вывод:
4
'''

from typing import List


def get_balance(n: int, m: int, prices: List[int]) -> int:
    balance = m
    for i in range(n):
        if balance >= prices[i]:
            balance -= prices[i]
    return balance

def max_burles(n: int, m: int, prices: List[int]) -> int:
    mx = 0
    for credit in range(1, m + 1):
        balance = get_balance(n, credit, prices)
        if balance > mx:
            mx = balance
    return mx


if __name__ == '__main__':
    assert max_burles(3, 10, [5, 4, 1]) == 2, 'Test 1'
    assert max_burles(3, 10, [1, 2, 3]) == 4, 'Test 2'
    assert max_burles(3, 10, [1, 1, 1]) == 7, 'Test 3'
    assert max_burles(4, 10, [3, 2, 1, 4]) == 3, 'Test 4'
    n, m = map(int, input().split())
    prices = list(map(int, input().split()))
    print(max_burles(n, m, prices))

    