'''
Кролик учит геометрию
Кролики очень любопытны. Они любят изучать геометрию, бегая по грядкам.
Наш кролик как раз такой. Сегодня он решил изучить новую фигуру — квадрат.
Кролик бегает по грядке — клеточному полю N × M клеток. В некоторых из них посеяны морковки, в некоторых нет.
Помогите кролику найти сторону квадрата наибольшей площади, заполненного морковками полностью.

Формат ввода
В первой строке даны два натуральных числа N и M (1<=N,M<=1000).
Далее в N строках расположено по M чисел, разделенных пробелами
(число равно 0, если в клетке нет морковки или 1, если есть).

Формат вывода
Выведите одно число — сторону наибольшего квадрата, заполненного морковками.

Пример 1
Ввод
4 5
0 0 0 1 0
0 1 1 1 0
0 0 1 1 0
1 0 1 0 0
Вывод
2
Пример 2
Ввод
10 10
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
Вывод
10
Пример 3
Ввод
10 10
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
Вывод
0
'''


def max_square_size(N, M, carrot):
    dp = [[0] * M for _ in range(N)]

    max_side = 0

    for i in range(N):
        for j in range(M):
            if carrot[i][j] == 1:
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                max_side = max(max_side, dp[i][j])

    return max_side


if __name__ == "__main__":
    N, M = map(int, input().split())
    carrot = [list(map(int, input().split())) for _ in range(N)]
    print(max_square_size(N, M, carrot))